#!/usr/bin/python3

"""
Module documentation
"""

class opClass:
    """
    Implements operations on integers
    """
    def __init__(self) -> None:
        """
        Initializes instance variables count, ops, and clipboard
        """
        self.count: int = 1
        self.ops: int = 0
        self.clipboard: int = 0

    def copy(self) -> None:
        """
        Sets clipboard to current count and increments ops by 1
        """
        self.clipboard = self.count
        self.ops += 1

    def paste(self) -> None:
        """
        Adds value of clipboard to current count and increments ops by 1
        """
        self.count += self.clipboard
        self.ops += 1

    def __str__(self) -> str:
        """
        Returns a string of 'H's repeated count times
        """
        return "H" * self.count

    def clear(self) -> None:
        """
        Resets instance variables to initial values
        """
        self.count = 1
        self.ops = 0
        self.clipboard = 0

    def minOperations(self, n: int) -> int:
        """
        Returns the minimum number of operations required to get to n from 1
        """
        # Check that input is a positive integer
        if not isinstance(n, int) or n < 1:
            return 0

        self.clear()

        # Perform operations until count reaches n
        while self.count < n:
            if self.clipboard == 0:
                self.copy()
                self.paste()
            elif n - self.count > 0 and (n - self.count) % self.count == 0:
                self.copy()
                self.paste()
            elif self.clipboard > 0:
                self.paste()

        # Return the number of operations performed
        return self.ops

def minOperations(n: int) -> int:
    """
    Returns the minimum number of operations required to get to n from 1
    """
    c: opClass = opClass()
    return c.minOperations(n)

